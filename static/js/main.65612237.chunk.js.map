{"version":3,"sources":["components/css/Todolist.module.css","components/universal-components/main-span/MainEditableSpan.module.css","components/universal-components/main-span/MainEditableSpan.tsx","components/Toodolist.tsx","components/Header.tsx","components/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MainEditableSpan","title","onChangeSpanHandler","useState","editMode","setEditMode","newTitle","setNewTitle","TextField","variant","onChange","e","currentTarget","value","onBlur","autoFocus","className","s","span","onDoubleClick","Todolist","tasks","nameTitle","removeTask","addTask","changeIsDone","todoListId","changeTodoListFilter","removeTodoList","changeTodoListTitle","changeTaskTitle","filter","setTitle","error","setError","setActiveButton","mappedTasks","map","t","li","isDone","Checkbox","key","id","checked","newIsDoneValue","IconButton","onClick","Delete","todoListBlock","removeTodoSection","addTaskSection","helperText","label","onKeyPress","trim","style","fontSize","marginLeft","color","taskBlock","buttonBlock","Button","size","Header","addTodoList","newTodoList","setNewTodoList","header","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","App","todoListId_1","v1","todoListId_2","todoLists","setTodoLists","setTasks","tl","el","newTask","newId","newIsDone","getFilteredTasks","tasksForTodoList","todoListComponents","app","todoListSection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.65612237.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Todolist_app__UXqvi\",\"li\":\"Todolist_li__3SaYh\",\"button\":\"Todolist_button__2TRqR\",\"buttonRemove\":\"Todolist_buttonRemove__1T2Cf\",\"input\":\"Todolist_input__1gWoG\",\"errorInput\":\"Todolist_errorInput__3i9z5\",\"errorMessage\":\"Todolist_errorMessage__3_w_0\",\"activeFilter\":\"Todolist_activeFilter__gJDQh\",\"isDone\":\"Todolist_isDone__2zKox\",\"taskBlock\":\"Todolist_taskBlock__14wDS\",\"header\":\"Todolist_header__MgT2v\",\"todoListSection\":\"Todolist_todoListSection__1Tubx\",\"todoListBlock\":\"Todolist_todoListBlock__2MaTq\",\"removeTodoSection\":\"Todolist_removeTodoSection__1riOq\",\"addTaskSection\":\"Todolist_addTaskSection__1p6FM\",\"buttonBlock\":\"Todolist_buttonBlock__MdCv_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"MainEditableSpan_span__nMQjl\"};","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './MainEditableSpan.module.css'\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype MainEditableSpanPropsType = {\r\n    title: string\r\n    onChangeSpanHandler: (text: string) => void\r\n}\r\n\r\nexport const MainEditableSpan: React.FC<MainEditableSpanPropsType> = (\r\n    {\r\n        title,\r\n        onChangeSpanHandler\r\n    }\r\n) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [newTitle, setNewTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setNewTitle(title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChangeSpanHandler(newTitle)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode ?\r\n                <TextField variant=\"standard\" onChange={onChangeTitleHandler} value={newTitle} onBlur={activateViewMode} autoFocus/> :\r\n                <span className={s.span} onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {MainButton} from \"./universal-components/main-button/MainButton\";\r\nimport {MainCheckBox} from \"./universal-components/main-checkbox/MainCheckBox\";\r\nimport {MainInput} from \"./universal-components/main-input/MainInput\";\r\nimport {FilterValuesType, TaskType} from \"../App\";\r\nimport s from './css/Todolist.module.css'\r\nimport {MainEditableSpan} from \"./universal-components/main-span/MainEditableSpan\";\r\nimport {Button, Checkbox, Icon, IconButton, TextField} from \"@mui/material\";\r\nimport ControlPointIcon from '@mui/icons-material/ControlPoint';\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\nexport type PropsType = {\r\n    filter: string\r\n    tasks: TaskType[]\r\n    nameTitle: string\r\n    removeTask: (id: string, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeIsDone: (newId: string, newIsDone: boolean, todoListId: string) => void\r\n    todoListId: string\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n    changeTaskTitle: (title: string, todoListId: string, id: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = (\r\n    {\r\n        tasks,\r\n        nameTitle,\r\n        removeTask,\r\n        addTask,\r\n        changeIsDone,\r\n        todoListId,\r\n        changeTodoListFilter,\r\n        removeTodoList,\r\n        changeTodoListTitle,\r\n        changeTaskTitle,\r\n        filter\r\n    }\r\n) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<null | string>(null)\r\n    const [activeButton, setActiveButton] = useState('all')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title.trim() !== '') {\r\n            addTask(title.trim(), todoListId)\r\n            setTitle('')\r\n        } else {\r\n            setError('Enter text')\r\n        }\r\n    }\r\n\r\n    const addTaskHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addTask(title.trim(), todoListId)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const setAll = () => {\r\n        changeTodoListFilter('all', todoListId)\r\n        setActiveButton('all')\r\n    }\r\n\r\n    const setComplete = () => {\r\n        changeTodoListFilter('completed', todoListId)\r\n        setActiveButton('completed')\r\n    }\r\n\r\n    const setActive = () => {\r\n        changeTodoListFilter('active', todoListId)\r\n        setActiveButton('active')\r\n    }\r\n\r\n    const mappedTasks = tasks.map(t => {\r\n        const changeTitleTaskHandler = (title: string) => {\r\n            changeTaskTitle(title, todoListId, t.id)\r\n        }\r\n        const changeIsDoneHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked\r\n            changeIsDone(t.id, newIsDoneValue, todoListId)\r\n        }\r\n\r\n        return (\r\n            <li className={s.li + ' ' + (t.isDone ? s.isDone : '')}>\r\n                <Checkbox key={t.id} checked={t.isDone} onChange={changeIsDoneHandler}/>\r\n                <MainEditableSpan title={t.title} onChangeSpanHandler={changeTitleTaskHandler}/>\r\n                <IconButton onClick={() => removeTask(t.id, todoListId)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const removeTodoListHandler = () => {\r\n        removeTodoList(todoListId)\r\n    }\r\n\r\n    const onChangeSpanHandler = (title: string) => {\r\n        changeTodoListTitle(title, todoListId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.todoListBlock}>\r\n            <div className={s.removeTodoSection}>\r\n                <MainEditableSpan onChangeSpanHandler={onChangeSpanHandler} title={nameTitle}/>\r\n                <IconButton onClick={removeTodoListHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <div className={s.addTaskSection}>\r\n                <TextField\r\n                    helperText={error}\r\n                    error={!!error}\r\n                    label=\"Enter text\"\r\n                    variant=\"outlined\"\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <ControlPointIcon\r\n                    style={{fontSize: '30px', marginLeft: '10px'}}\r\n                    onClick={addTaskHandler}\r\n                    color={'primary'}\r\n                />\r\n            </div>\r\n            <ul className={s.taskBlock}>\r\n                {mappedTasks}\r\n            </ul>\r\n            <div className={s.buttonBlock}>\r\n                <Button size=\"medium\" variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                        onClick={setAll}>All</Button>\r\n                <Button size=\"medium\" variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                        onClick={setComplete}>Complete</Button>\r\n                <Button size=\"medium\" variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                        onClick={setActive}>Active</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './css/Todolist.module.css'\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\nexport type HeaderPropsType = {\r\n    addTodoList: (title: string) => void\r\n}\r\n\r\nexport const Header: React.FC<HeaderPropsType> = ({addTodoList}) => {\r\n    const [newTodoList, setNewTodoList] = useState('')\r\n    const [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTodoList(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n\r\n    const addTodoHandler = () => {\r\n        if (newTodoList.trim() !== '') {\r\n            addTodoList(newTodoList)\r\n            setNewTodoList('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.header}>\r\n            <TextField\r\n                helperText={error}\r\n                error={!!error}\r\n                label=\"Enter text\"\r\n                variant=\"outlined\"\r\n                value={newTodoList}\r\n                onChange={onChangeHandler}\r\n            />\r\n            <Button style={ { marginLeft: '30px' } } size=\"medium\" variant={'contained'} onClick={addTodoHandler}>Add</Button>\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport const ButtonAppBar = () => {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./components/Toodolist\";\r\nimport {v1} from \"uuid\";\r\nimport {Header} from \"./components/Header\";\r\nimport s from \"./components/css/Todolist.module.css\";\r\nimport {ButtonAppBar} from \"./components/NavBar\";\r\nimport {Paper} from \"@mui/material\";\r\n\r\n//Type\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string\r\n    filter: FilterValuesType\r\n    // isOpen: boolean\r\n}\r\nexport type TasksStateType = {\r\n    [todoListId: string]: TaskType[]\r\n}\r\n\r\n\r\nfunction App() {\r\n    // BLL:\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListId_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId_2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS/TS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"RTK\", isDone: false},\r\n        ],\r\n\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Water\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Toilet paper\", isDone: false},\r\n            {id: v1(), title: \"Buckwheat\", isDone: false},\r\n            {id: v1(), title: \"Meet\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    // Function\r\n\r\n    const changeTodoListTitle = (title: string, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    const changeTaskTitle = (title: string, todoListId: string, id: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: tasks[todoListId].map(el => el.id === id ? {...el, title: title} : el)\r\n        })\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        let id = v1();\r\n        const newTodo: TodoListType = {\r\n            id,\r\n            title: title,\r\n            filter: 'all',\r\n        }\r\n\r\n        setTodoLists([newTodo, ...todoLists])\r\n        setTasks({...tasks, [id]: []})\r\n    }\r\n\r\n    const addTask = (title: string, todoListId: string) => {\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    }\r\n\r\n    const removeTask = (id: string, todoListId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter(t => t.id !== id)})\r\n    }\r\n\r\n    const changeIsDone = (newId: string, newIsDone: boolean, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: tasks[todoListId].map(el => el.id === newId ? {...el, isDone: newIsDone} : el)\r\n        })\r\n    }\r\n\r\n    const changeTodoListFilter = (filter: FilterValuesType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: filter} : tl))\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n    const getFilteredTasks = (tasks: Array<TaskType>, filter: FilterValuesType) => {\r\n        let tasksForTodoList = tasks;\r\n        if (filter === \"active\") {\r\n            tasksForTodoList = tasks.filter(t => !t.isDone)\r\n        }\r\n        if (filter === \"completed\") {\r\n            tasksForTodoList = tasks.filter(t => t.isDone)\r\n        }\r\n        return tasksForTodoList\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        return (\r\n            <Todolist\r\n                key={tl.id}\r\n                todoListId={tl.id}\r\n                nameTitle={tl.title}\r\n                tasks={getFilteredTasks(tasks[tl.id], tl.filter)}\r\n                filter={tl.filter}\r\n                removeTask={removeTask}\r\n                addTask={addTask}\r\n                changeIsDone={changeIsDone}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                removeTodoList={removeTodoList}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n                changeTaskTitle={changeTaskTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <ButtonAppBar />\r\n            <Header addTodoList={addTodoList}/>\r\n            <div className={s.todoListSection}>\r\n                {todoListComponents}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}