{"version":3,"sources":["components/css/Todolist.module.css","components/universal-components/main-button/MainButton.tsx","components/universal-components/main-checkbox/MainCheckBox.tsx","components/universal-components/main-input/MainInput.tsx","components/Toodolist.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MainButton","callback","name","classname","className","onClick","MainCheckBox","props","type","checked","onChange","e","callBack","currentTarget","MainInput","inputClass","error","s","input","errorInput","value","onKeyPress","Todolist","tasks","nameTitle","removeTask","addTask","changeIsDone","todoListId","changeTodoListFilter","removeTodoList","useState","title","setTitle","setError","activeButton","setActiveButton","open","setOpen","mappedTasks","map","t","li","isDone","key","id","tId","changeIsDoneHandler","buttonRemove","todoListBlock","button","trim","errorMessage","taskBlock","activeFilter","Header","newTodoList","setNewTodoList","header","addTodoList","App","todoListId_1","v1","todoListId_2","filter","todoLists","setTodoLists","setTasks","newTask","newId","newIsDone","el","tl","getFilteredTasks","tasksForTodoList","todoListComponents","todoListSection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.586ed9c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"Todolist_li__3SaYh\",\"button\":\"Todolist_button__2TRqR\",\"buttonRemove\":\"Todolist_buttonRemove__1T2Cf\",\"input\":\"Todolist_input__1gWoG\",\"errorInput\":\"Todolist_errorInput__3i9z5\",\"errorMessage\":\"Todolist_errorMessage__3_w_0\",\"activeFilter\":\"Todolist_activeFilter__gJDQh\",\"isDone\":\"Todolist_isDone__2zKox\",\"taskBlock\":\"Todolist_taskBlock__14wDS\",\"header\":\"Todolist_header__MgT2v\",\"todoListSection\":\"Todolist_todoListSection__1Tubx\",\"todoListBlock\":\"Todolist_todoListBlock__2MaTq\"};","import React from \"react\";\r\n\r\ntype MainButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    classname?: string\r\n}\r\n\r\nexport const MainButton: React.FC<MainButtonPropsType> = ({callback, name, classname = ''}) => {\r\n\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    return (\r\n        <button className={classname} onClick={onClickHandler}>{name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype SuperCheckBoxPropsType = {\r\n    checked: boolean\r\n    callBack: (isDone: boolean) => void\r\n}\r\n\r\nexport const MainCheckBox = (props:SuperCheckBoxPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.callBack(e.currentTarget.checked)\r\n    }\r\n\r\n  return (\r\n      <input type=\"checkbox\" checked={props.checked} onChange={onChangeHandler}/>\r\n  )\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport s from '../../css/Todolist.module.css'\r\n\r\ntype SuperInputPropsType = {\r\n    value?: string | undefined\r\n    callback:(e:ChangeEvent<HTMLInputElement>) => void | undefined\r\n    onKeyPress:(e: KeyboardEvent<HTMLInputElement>) => void\r\n    classname?:any\r\n    error?: string | null\r\n}\r\n\r\nexport const MainInput = (props:SuperInputPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.callback(e)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        props.onKeyPress(e)\r\n    }\r\n\r\n    const inputClass = (props.error) ? (s.input + ' ' + s.errorInput) : s.input\r\n\r\n    return (\r\n        <input value={props.value} className={inputClass} onKeyPress={onKeyPressHandler} onChange={onChangeHandler}/>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {MainButton} from \"./universal-components/main-button/MainButton\";\r\nimport {MainCheckBox} from \"./universal-components/main-checkbox/MainCheckBox\";\r\nimport {MainInput} from \"./universal-components/main-input/MainInput\";\r\nimport {FilterValuesType, TaskType, TodoListType} from \"../App\";\r\nimport s from './css/Todolist.module.css'\r\n\r\nexport type PropsType = {\r\n    filter: string\r\n    tasks: TaskType[]\r\n    nameTitle: string\r\n    removeTask: (id: string, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    changeIsDone: (newId: string, newIsDone: boolean, todoListId: string) => void\r\n    todoListId: string\r\n    changeTodoListFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = ({\r\n                                                  tasks,\r\n                                                  nameTitle,\r\n                                                  removeTask,\r\n                                                  addTask,\r\n                                                  changeIsDone,\r\n                                                  todoListId,\r\n                                                  changeTodoListFilter,\r\n                                                  removeTodoList,\r\n                                              }) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<null | string>(null)\r\n    const [activeButton, setActiveButton] = useState('all')\r\n    let [open, setOpen] = useState(true);\r\n\r\n    const onclickOpenHandler = () => {\r\n       if(open) {\r\n           setOpen(false)\r\n       } else\r\n           setOpen(!open)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title.trim() !== '') {\r\n            addTask(title.trim(), todoListId)\r\n            setTitle('')\r\n        } else {\r\n            setError('Enter text')\r\n        }\r\n    }\r\n\r\n    const addTaskHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addTask(title.trim(), todoListId)\r\n            setTitle('')\r\n        } else {\r\n            setError('Enter text')\r\n        }\r\n    }\r\n\r\n    const setAll = () => {\r\n        changeTodoListFilter('all', todoListId)\r\n        setActiveButton('all')\r\n    }\r\n\r\n    const setComplete = () => {\r\n        changeTodoListFilter('completed', todoListId)\r\n        setActiveButton('completed')\r\n    }\r\n\r\n    const setActive = () => {\r\n        changeTodoListFilter('active', todoListId)\r\n        setActiveButton('active')\r\n    }\r\n\r\n    const changeIsDoneHandler = (tId: string, isDone: boolean) => {\r\n        changeIsDone(tId, isDone, todoListId)\r\n    }\r\n\r\n    const mappedTasks = tasks.map(t => {\r\n        return (\r\n            <li className={s.li + ' ' + (t.isDone ? s.isDone : '')}>\r\n                <MainCheckBox key={t.id} checked={t.isDone}\r\n                              callBack={(isDone: boolean) => changeIsDoneHandler(t.id, isDone)}/>\r\n                <span>{t.title}</span>\r\n                <MainButton classname={s.buttonRemove} name={'x'} callback={() => removeTask(t.id, todoListId)}/>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const removeTodoListHandler = () => {\r\n        removeTodoList(todoListId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.todoListBlock}>\r\n            <MainButton classname={s.button} name={'Delete'} callback={removeTodoListHandler}/>\r\n            <MainButton classname={s.button} name={open ? 'Closed' : 'Open'} callback={onclickOpenHandler}/>\r\n            <h3>{nameTitle}</h3>\r\n\r\n            {open &&\r\n                <div>\r\n                    <div>\r\n                        <MainInput\r\n                            error={error}\r\n                            value={title}\r\n                            callback={onChangeHandler}\r\n                            onKeyPress={onKeyPressHandler}\r\n                        />\r\n                        <MainButton\r\n                            name={'+'}\r\n                            classname={s.button}\r\n                            callback={addTaskHandler}\r\n                        />\r\n                    </div>\r\n                    {error && <div className={s.errorMessage}>{error}</div>}\r\n                    <ul className={s.taskBlock}>\r\n                        {mappedTasks}\r\n                    </ul>\r\n                    <div>\r\n                        <MainButton classname={s.button + ' ' + (activeButton === 'all' ? s.activeFilter : '')}\r\n                                    name={'All'}\r\n                                    callback={setAll}/>\r\n                        <MainButton classname={s.button + ' ' + (activeButton === 'completed' ? s.activeFilter : '')}\r\n                                    name={'Complete'} callback={setComplete}/>\r\n                        <MainButton classname={s.button + ' ' + (activeButton === 'active' ? s.activeFilter : '')}\r\n                                    name={'Active'} callback={setActive}/>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './css/Todolist.module.css'\r\nimport {MainInput} from \"./universal-components/main-input/MainInput\";\r\nimport {MainButton} from \"./universal-components/main-button/MainButton\";\r\n\r\nexport type HeaderPropsType = {\r\n    addTodoList: (title: string) => void\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    const [newTodoList, setNewTodoList] = useState('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTodoList(e.currentTarget.value)\r\n    }\r\n\r\n    const addTodoHandler = () => {\r\n        if (newTodoList.trim() !== '') {\r\n            props.addTodoList(newTodoList)\r\n            setNewTodoList('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.header}>\r\n            <MainInput value={newTodoList} classname={s.input} callback={onChangeHandler} onKeyPress={() => {\r\n            }}/>\r\n            <MainButton classname={s.button} name={'Add Todolist'} callback={addTodoHandler}/>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./components/Toodolist\";\r\nimport {v1} from \"uuid\";\r\nimport {Header} from \"./components/Header\";\r\nimport s from \"./components/css/Todolist.module.css\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string\r\n    filter: FilterValuesType\r\n    // isOpen: boolean\r\n}\r\nexport type TasksStateType = {\r\n    [todoListId: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    // BLL:\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListId_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId_2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS/TS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"RTK\", isDone: false},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Water\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Toilet paper\", isDone: false},\r\n            {id: v1(), title: \"Buckwheat\", isDone: false},\r\n            {id: v1(), title: \"Meet\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    // Function\r\n    // const changeStatusTodolist = (todoListId:string) => {\r\n    //     setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, isOpen: true} :\r\n    //         tl.isOpen ? {...tl, isOpen:false} : tl\r\n    //     ))\r\n    // }\r\n\r\n    const addTodoList = (title: string) => {\r\n        let id = v1();\r\n        const newTodo: TodoListType = {\r\n            id,\r\n            title: title,\r\n            filter: 'all',\r\n        }\r\n\r\n        setTodoLists([newTodo, ...todoLists])\r\n        setTasks({...tasks, [id]: []})\r\n    }\r\n\r\n    const addTask = (title: string, todoListId: string) => {\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    }\r\n\r\n    const removeTask = (id: string, todoListId: string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter(t => t.id !== id)})\r\n    }\r\n\r\n    const changeIsDone = (newId: string, newIsDone: boolean, todoListId: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListId]: tasks[todoListId].map(el => el.id === newId ? {...el, isDone: newIsDone} : el)\r\n        })\r\n    }\r\n\r\n    const changeTodoListFilter = (filter: FilterValuesType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: filter} : tl))\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n    const getFilteredTasks = (tasks: Array<TaskType>, filter: FilterValuesType) => {\r\n        let tasksForTodoList = tasks;\r\n        if (filter === \"active\") {\r\n            tasksForTodoList = tasks.filter(t => !t.isDone)\r\n        }\r\n        if (filter === \"completed\") {\r\n            tasksForTodoList = tasks.filter(t => t.isDone)\r\n        }\r\n        return tasksForTodoList\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        return (\r\n            <Todolist\r\n                key={tl.id}\r\n                todoListId={tl.id}\r\n                nameTitle={tl.title}\r\n                tasks={getFilteredTasks(tasks[tl.id], tl.filter)}\r\n                filter={tl.filter}\r\n                removeTask={removeTask}\r\n                addTask={addTask}\r\n                changeIsDone={changeIsDone}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                removeTodoList={removeTodoList}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header addTodoList={addTodoList}/>\r\n            <div className={s.todoListSection}>\r\n                {todoListComponents}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}