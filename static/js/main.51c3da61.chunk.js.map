{"version":3,"sources":["components/css/Todolist.module.css","components/universal-components/main-span/MainEditableSpan.module.css","components/universal-components/main-span/MainEditableSpan.tsx","components/Toodolist.tsx","components/Header.tsx","components/NavBar.tsx","components/redux/TodoListReducer.ts","components/redux/TaskReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MainEditableSpan","title","onChangeSpanHandler","useState","editMode","setEditMode","newTitle","setNewTitle","TextField","variant","onChange","e","currentTarget","value","onBlur","autoFocus","className","s","span","onDoubleClick","Todolist","tasks","nameTitle","removeTask","addTask","changeIsDone","todoListId","changeTodoListFilter","removeTodoList","changeTodoListTitle","changeTaskTitle","filter","setTitle","error","setError","mappedTasks","map","t","li","isDone","Checkbox","key","id","checked","newIsDoneValue","IconButton","onClick","Delete","todoListBlock","removeTodoSection","addTaskSection","helperText","label","onKeyPress","trim","style","fontSize","marginLeft","color","taskBlock","buttonBlock","Button","size","Header","addTodoList","newTodoList","setNewTodoList","header","ButtonAppBar","Box","sx","flexGrow","AppBar","position","Toolbar","edge","aria-label","mr","Typography","component","todoListReducer","state","action","type","el","taskReducer","newTask","v1","taskId","newIsDone","newState","App","todoListId_1","todoListId_2","useReducer","todoLists","dispatch","dispatchTask","removeTodoListTitleAC","changeTodoListFilterAC","removeTodoListAC","removeTaskListAC","changeTaskTitleAC","addTaskAC","removeTaskAC","changeTaskStatusAC","getFilteredTasks","tasksForTodoList","todoListComponents","tl","app","newTodolistID","addTodoListAC","todoListSection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.51c3da61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Todolist_app__UXqvi\",\"li\":\"Todolist_li__3SaYh\",\"button\":\"Todolist_button__2TRqR\",\"buttonRemove\":\"Todolist_buttonRemove__1T2Cf\",\"input\":\"Todolist_input__1gWoG\",\"errorInput\":\"Todolist_errorInput__3i9z5\",\"errorMessage\":\"Todolist_errorMessage__3_w_0\",\"activeFilter\":\"Todolist_activeFilter__gJDQh\",\"isDone\":\"Todolist_isDone__2zKox\",\"taskBlock\":\"Todolist_taskBlock__14wDS\",\"header\":\"Todolist_header__MgT2v\",\"todoListSection\":\"Todolist_todoListSection__1Tubx\",\"todoListBlock\":\"Todolist_todoListBlock__2MaTq\",\"removeTodoSection\":\"Todolist_removeTodoSection__1riOq\",\"addTaskSection\":\"Todolist_addTaskSection__1p6FM\",\"buttonBlock\":\"Todolist_buttonBlock__MdCv_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"MainEditableSpan_span__nMQjl\"};","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './MainEditableSpan.module.css'\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype MainEditableSpanPropsType = {\r\n    title: string\r\n    onChangeSpanHandler: (text: string) => void\r\n}\r\n\r\nexport const MainEditableSpan: React.FC<MainEditableSpanPropsType> = (\r\n    {\r\n        title,\r\n        onChangeSpanHandler\r\n    }\r\n) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [newTitle, setNewTitle] = useState('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setNewTitle(title)\r\n    }\r\n\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChangeSpanHandler(newTitle)\r\n    }\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode ?\r\n                <TextField variant=\"standard\" onChange={onChangeTitleHandler} value={newTitle} onBlur={activateViewMode} autoFocus/> :\r\n                <span className={s.span} onDoubleClick={activateEditMode}>{title}</span>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"../App\";\r\nimport s from './css/Todolist.module.css'\r\nimport {MainEditableSpan} from \"./universal-components/main-span/MainEditableSpan\";\r\nimport {Button, Checkbox, Icon, IconButton, TextField} from \"@mui/material\";\r\nimport ControlPointIcon from '@mui/icons-material/ControlPoint';\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\nexport type PropsType = {\r\n    filter: string\r\n    tasks: TaskType[]\r\n    nameTitle: string\r\n    removeTask: (todoListId: string, taskId: string) => void\r\n    addTask: (todoListId: string, title: string) => void\r\n    changeIsDone: (todoListId: string, taskId: string, newIsDone: boolean) => void\r\n    todoListId: string\r\n    changeTodoListFilter: (todoListId: string, filter:FilterValuesType) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTodoListTitle: (todoListId: string, title: string) => void\r\n    changeTaskTitle: (todoListId: string, taskId: string, title: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = (\r\n    {\r\n        tasks,\r\n        nameTitle,\r\n        removeTask,\r\n        addTask,\r\n        changeIsDone,\r\n        todoListId,\r\n        changeTodoListFilter,\r\n        removeTodoList,\r\n        changeTodoListTitle,\r\n        changeTaskTitle,\r\n        filter\r\n    }\r\n) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title.trim() !== '') {\r\n            addTask(todoListId, title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError('Enter text')\r\n        }\r\n    }\r\n\r\n    const addTaskHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addTask(todoListId, title.trim())\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const setAll = () => {\r\n        changeTodoListFilter(todoListId, 'all')\r\n    }\r\n\r\n    const setComplete = () => {\r\n        changeTodoListFilter(todoListId, 'completed')\r\n    }\r\n\r\n    const setActive = () => {\r\n        changeTodoListFilter(todoListId, 'active')\r\n    }\r\n\r\n    const mappedTasks = tasks.map(t => {\r\n        const changeTitleTaskHandler = (title: string) => {\r\n            changeTaskTitle(todoListId, t.id, title)\r\n        }\r\n        const changeIsDoneHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked\r\n            changeIsDone(todoListId, t.id, newIsDoneValue)\r\n        }\r\n\r\n        return (\r\n            <li className={s.li + ' ' + (t.isDone ? s.isDone : '')}>\r\n                <Checkbox key={t.id} checked={t.isDone} onChange={changeIsDoneHandler}/>\r\n                <MainEditableSpan title={t.title} onChangeSpanHandler={changeTitleTaskHandler}/>\r\n                <IconButton onClick={() => removeTask(todoListId, t.id)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const removeTodoListHandler = () => {\r\n        removeTodoList(todoListId)\r\n    }\r\n\r\n    const onChangeSpanHandler = (title: string) => {\r\n        changeTodoListTitle(todoListId, title)\r\n    }\r\n\r\n    return (\r\n        <div className={s.todoListBlock}>\r\n            <div className={s.removeTodoSection}>\r\n                <MainEditableSpan onChangeSpanHandler={onChangeSpanHandler} title={nameTitle}/>\r\n                <IconButton onClick={removeTodoListHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <div className={s.addTaskSection}>\r\n                <TextField\r\n                    helperText={error}\r\n                    error={!!error}\r\n                    label=\"Enter text\"\r\n                    variant=\"outlined\"\r\n                    value={title}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <ControlPointIcon\r\n                    style={{fontSize: '30px', marginLeft: '10px'}}\r\n                    onClick={addTaskHandler}\r\n                    color={'primary'}\r\n                />\r\n            </div>\r\n            <ul className={s.taskBlock}>\r\n                {mappedTasks}\r\n            </ul>\r\n            <div className={s.buttonBlock}>\r\n                <Button size=\"medium\" variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                        onClick={setAll}>All</Button>\r\n                <Button size=\"medium\" variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                        onClick={setComplete}>Complete</Button>\r\n                <Button size=\"medium\" variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                        onClick={setActive}>Active</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './css/Todolist.module.css'\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\nexport type HeaderPropsType = {\r\n    addTodoList: (title: string) => void\r\n}\r\n\r\nexport const Header: React.FC<HeaderPropsType> = ({addTodoList}) => {\r\n    const [newTodoList, setNewTodoList] = useState('')\r\n    const [error, setError] = useState<null | string>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTodoList(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n\r\n    const addTodoHandler = () => {\r\n        if (newTodoList.trim() !== '') {\r\n            addTodoList(newTodoList)\r\n            setNewTodoList('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.header}>\r\n            <TextField\r\n                helperText={error}\r\n                error={!!error}\r\n                label=\"Enter text\"\r\n                variant=\"outlined\"\r\n                value={newTodoList}\r\n                onChange={onChangeHandler}\r\n            />\r\n            <Button style={ { marginLeft: '30px' } } size=\"medium\" variant={'contained'} onClick={addTodoHandler}>Add</Button>\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport const ButtonAppBar = () => {\r\n    return (\r\n        <Box sx={{ flexGrow: 1 }}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n","import {FilterValuesType, TodoListType} from \"../../App\";\r\n\r\ntype ActionType =\r\n    RemoveTodoListAT | RemoveTodoListTitleAT | AddTodoListAT |ChangeTodoListFilterAT\r\n\r\ntype RemoveTodoListAT = {\r\n    type: 'REMOVE_TODOLIST'\r\n    todoListId: string\r\n}\r\n\r\ntype RemoveTodoListTitleAT = {\r\n    type: 'REMOVE_TODOLIST_TITLE'\r\n    todoListId: string\r\n    title: string\r\n}\r\n\r\ntype AddTodoListAT = {\r\n    type: 'ADD_TODOLIST'\r\n    todoListId: string\r\n    title: string\r\n}\r\n\r\ntype ChangeTodoListFilterAT = {\r\n    type: 'CHANGE_TODOLIST_FILTER'\r\n    todoListId: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST'\r\nconst REMOVE_TODOLIST_TITLE = 'REMOVE_TODOLIST_TITLE'\r\nconst ADD_TODOLIST = 'ADD_TODOLIST'\r\nconst CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER'\r\n\r\nexport const todoListReducer = (state: TodoListType[], action: ActionType): TodoListType[] => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(el => el.id !== action.todoListId)\r\n\r\n        case REMOVE_TODOLIST_TITLE:\r\n            return state.map(el => el.id === action.todoListId ? {...el, title: action.title} : el)\r\n\r\n        case ADD_TODOLIST:\r\n            const newTodoList: TodoListType = {\r\n                id: action.todoListId,\r\n                title: action.title,\r\n                filter: 'all',\r\n            }\r\n\r\n            return [newTodoList, ...state]\r\n\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return state.map(el => el.id === action.todoListId ? {...el, filter: action.filter} : el)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListId: string): RemoveTodoListAT => {\r\n    return {type: REMOVE_TODOLIST, todoListId}\r\n}\r\n\r\nexport const removeTodoListTitleAC = (todoListId: string, title: string): RemoveTodoListTitleAT => {\r\n    return {type: REMOVE_TODOLIST_TITLE, todoListId, title}\r\n}\r\n\r\nexport const addTodoListAC = (todoListId: string, title: string): AddTodoListAT => {\r\n    return {type: ADD_TODOLIST, todoListId, title}\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListId: string, filter:FilterValuesType):ChangeTodoListFilterAT => {\r\n    return {type: CHANGE_TODOLIST_FILTER, todoListId, filter}\r\n}","import {TasksStateType} from \"../../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype ActionType = RemoveTaskAT | AddTaskAT | ChangeTaskTitleAT | ChangeTaskStatusAT | AddEmptyTaskAT | RemoveTaskListAT\r\n\r\ntype RemoveTaskAT = {\r\n    type: 'REMOVE_TASK'\r\n    todoListId: string\r\n    taskId: string\r\n}\r\n\r\ntype AddTaskAT = {\r\n    type: 'ADD_TASK'\r\n    todoListId: string\r\n    title: string\r\n}\r\n\r\ntype ChangeTaskTitleAT = {\r\n    type: 'CHANGE_TASK_TITLE'\r\n    todoListId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ChangeTaskStatusAT = {\r\n    type: 'CHANGE_TASK_STATUS'\r\n    todoListId: string\r\n    taskId:string\r\n    newIsDone: boolean\r\n}\r\n\r\ntype AddEmptyTaskAT = {\r\n    type:'ADD_EMPTY_TASK'\r\n    todoListId: string\r\n}\r\n\r\ntype RemoveTaskListAT = {\r\n    type:'REMOVE_TASK_LIST'\r\n    todoListId: string\r\n}\r\n\r\nconst REMOVE_TASK = 'REMOVE_TASK'\r\nconst ADD_TASK = 'ADD_TASK'\r\nconst CHANGE_TASK_TITLE = 'CHANGE_TASK_TITLE'\r\nconst CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS'\r\nconst ADD_EMPTY_TASK = 'ADD_EMPTY_TASK'\r\nconst REMOVE_TASK_LIST = 'REMOVE_TASK_LIST'\r\n\r\nexport const taskReducer = (state: TasksStateType, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {...state, [action.todoListId]: [newTask, ...state[action.todoListId]]}\r\n\r\n        case REMOVE_TASK:\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\r\n\r\n        case CHANGE_TASK_TITLE:\r\n            return {...state, [action.todoListId]: state[action.todoListId]\r\n                    .map(el => el.id === action.taskId ? {...el, title: action.title} : el)}\r\n\r\n        case CHANGE_TASK_STATUS:\r\n            return {...state, [action.todoListId]: state[action.todoListId]\r\n                    .map(el => el.id === action.taskId ? {...el, isDone: action.newIsDone} : el)}\r\n\r\n        case ADD_EMPTY_TASK:\r\n            return {...state, [action.todoListId]: []}\r\n\r\n        case REMOVE_TASK_LIST:\r\n            let newState = {...state}\r\n            delete newState[action.todoListId]\r\n            return newState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (todoListId: string, title: string):AddTaskAT => {\r\n    return {type: ADD_TASK, todoListId, title}\r\n}\r\n\r\nexport const removeTaskAC = (todoListId: string, taskId: string):RemoveTaskAT => {\r\n    return {type: REMOVE_TASK, todoListId, taskId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (todoListId: string, taskId: string, title: string):ChangeTaskTitleAT => {\r\n    return {type: CHANGE_TASK_TITLE, todoListId, taskId, title}\r\n}\r\n\r\nexport const changeTaskStatusAC = (todoListId: string, taskId: string, newIsDone: boolean):ChangeTaskStatusAT => {\r\n    return {type: CHANGE_TASK_STATUS, todoListId, taskId, newIsDone}\r\n}\r\n\r\nexport const addEmptyTaskAC = (todoListId: string):AddEmptyTaskAT => {\r\n    return {type: ADD_EMPTY_TASK, todoListId}\r\n}\r\n\r\nexport const removeTaskListAC = (todoListId: string):RemoveTaskListAT => {\r\n    return {type: REMOVE_TASK_LIST, todoListId}\r\n}\r\n\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./components/Toodolist\";\r\nimport {v1} from \"uuid\";\r\nimport {Header} from \"./components/Header\";\r\nimport s from \"./components/css/Todolist.module.css\";\r\nimport {ButtonAppBar} from \"./components/NavBar\";\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC, removeTodoListAC,\r\n    removeTodoListTitleAC,\r\n    todoListReducer\r\n} from \"./components/redux/TodoListReducer\";\r\nimport {\r\n    addEmptyTaskAC,\r\n    addTaskAC,\r\n    changeTaskStatusAC,\r\n    changeTaskTitleAC,\r\n    removeTaskAC, removeTaskListAC,\r\n    taskReducer\r\n} from \"./components/redux/TaskReducer\";\r\n\r\n//Type\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string\r\n    filter: FilterValuesType\r\n    // isOpen: boolean\r\n}\r\nexport type TasksStateType = {\r\n    [todoListId: string]: TaskType[]\r\n}\r\n\r\n\r\nfunction App() {\r\n    // BLL:\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n\r\n    const [todoLists, dispatch] = useReducer(todoListReducer, [\r\n        {id: todoListId_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId_2, title: \"What to buy\", filter: \"all\"}\r\n    ])\r\n\r\n    const [tasks, dispatchTask] = useReducer(taskReducer, {\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS/TS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"RTK\", isDone: false},\r\n        ],\r\n\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Water\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Toilet paper\", isDone: false},\r\n            {id: v1(), title: \"Buckwheat\", isDone: false},\r\n            {id: v1(), title: \"Meet\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    //TodoList\r\n\r\n    const changeTodoListTitle = (todoListId: string, title: string) => {\r\n        dispatch(removeTodoListTitleAC(todoListId, title))\r\n    }\r\n\r\n    const addTodoList = (title: string) => {\r\n        if (title !== '') {\r\n            let newTodolistID = v1();\r\n            dispatch(addTodoListAC(newTodolistID, title))\r\n            dispatchTask(addEmptyTaskAC(newTodolistID))\r\n        }\r\n    }\r\n\r\n    const changeTodoListFilter = (todoListId: string, filter:FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(todoListId, filter))\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        dispatch(removeTodoListAC(todoListId))\r\n        dispatchTask(removeTaskListAC(todoListId))\r\n    }\r\n\r\n    //Task\r\n\r\n    const changeTaskTitle = (todoListId: string, taskId: string, title: string) => {\r\n        dispatchTask(changeTaskTitleAC(todoListId, taskId, title))\r\n    }\r\n\r\n    const addTask = (todoListId: string, title: string) => {\r\n        dispatchTask(addTaskAC(todoListId, title))\r\n    }\r\n\r\n    const removeTask = (todoListId: string, taskId: string) => {\r\n        dispatchTask(removeTaskAC(todoListId, taskId))\r\n    }\r\n\r\n    const changeIsDone = (todoListId: string, taskId: string, newIsDone: boolean) => {\r\n        dispatchTask(changeTaskStatusAC(todoListId, taskId, newIsDone))\r\n    }\r\n\r\n    const getFilteredTasks = (tasks: Array<TaskType>, filter: FilterValuesType) => {\r\n        let tasksForTodoList = tasks;\r\n        if (filter === \"active\") {\r\n            tasksForTodoList = tasks.filter(t => !t.isDone)\r\n        }\r\n        if (filter === \"completed\") {\r\n            tasksForTodoList = tasks.filter(t => t.isDone)\r\n        }\r\n        return tasksForTodoList\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        return (\r\n            <Todolist\r\n                key={tl.id}\r\n                todoListId={tl.id}\r\n                nameTitle={tl.title}\r\n                tasks={getFilteredTasks(tasks[tl.id], tl.filter)}\r\n                filter={tl.filter}\r\n                removeTask={removeTask}\r\n                addTask={addTask}\r\n                changeIsDone={changeIsDone}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                removeTodoList={removeTodoList}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n                changeTaskTitle={changeTaskTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            <ButtonAppBar/>\r\n            <Header addTodoList={addTodoList}/>\r\n            <div className={s.todoListSection}>\r\n                {todoListComponents}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}