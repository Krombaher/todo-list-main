{"version":3,"sources":["components/css/Todolist.module.css","components/universal-components/main-button/MainButton.tsx","components/universal-components/main-checkbox/MainCheckBox.tsx","components/universal-components/main-input/MainInput.tsx","components/Toodolist.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MainButton","callback","name","classname","className","onClick","MainCheckBox","props","type","checked","onChange","e","callBack","currentTarget","MainInput","inputClass","error","s","input","errorInput","value","onKeyPress","Todolist","tasks","nameTitle","removeTask","addTask","changeIsDone","todoListId","changeTodoListFilter","removeTodoList","useState","title","setTitle","setError","activeButton","setActiveButton","mappedTasks","map","t","li","isDone","key","id","tId","changeIsDoneHandler","buttonRemove","todoListBlock","button","trim","errorMessage","taskBlock","activeFilter","Header","header","App","todoListId_1","v1","todoListId_2","filter","todoLists","setTodoLists","setTasks","newTask","newId","newIsDone","el","tl","getFilteredTasks","tasksForTodoList","todoListComponents","todoListSection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d381c7b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"Todolist_li__3SaYh\",\"button\":\"Todolist_button__2TRqR\",\"buttonRemove\":\"Todolist_buttonRemove__1T2Cf\",\"input\":\"Todolist_input__1gWoG\",\"errorInput\":\"Todolist_errorInput__3i9z5\",\"errorMessage\":\"Todolist_errorMessage__3_w_0\",\"activeFilter\":\"Todolist_activeFilter__gJDQh\",\"isDone\":\"Todolist_isDone__2zKox\",\"taskBlock\":\"Todolist_taskBlock__14wDS\",\"header\":\"Todolist_header__MgT2v\",\"todoListSection\":\"Todolist_todoListSection__1Tubx\",\"todoListBlock\":\"Todolist_todoListBlock__2MaTq\"};","import React from \"react\";\r\n\r\ntype MainButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    classname?: string\r\n}\r\n\r\nexport const MainButton: React.FC<MainButtonPropsType> = ({callback, name, classname = ''}) => {\r\n\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    return (\r\n        <button className={classname} onClick={onClickHandler}>{name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype SuperCheckBoxPropsType = {\r\n    checked: boolean\r\n    callBack: (isDone: boolean) => void\r\n}\r\n\r\nexport const MainCheckBox = (props:SuperCheckBoxPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.callBack(e.currentTarget.checked)\r\n    }\r\n\r\n  return (\r\n      <input type=\"checkbox\" checked={props.checked} onChange={onChangeHandler}/>\r\n  )\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport s from '../../css/Todolist.module.css'\r\n\r\ntype SuperInputPropsType = {\r\n    value?: string | undefined\r\n    callback:(e:ChangeEvent<HTMLInputElement>) => void | undefined\r\n    onKeyPress:(e: KeyboardEvent<HTMLInputElement>) => void\r\n    classname?:any\r\n    error?: string | null\r\n}\r\n\r\nexport const MainInput = (props:SuperInputPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.callback(e)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        props.onKeyPress(e)\r\n    }\r\n\r\n    const inputClass = (props.error) ? (s.input + ' ' + s.errorInput) : s.input\r\n\r\n    return (\r\n        <input value={props.value} className={inputClass} onKeyPress={onKeyPressHandler} onChange={onChangeHandler}/>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {MainButton} from \"./universal-components/main-button/MainButton\";\r\nimport {MainCheckBox} from \"./universal-components/main-checkbox/MainCheckBox\";\r\nimport {MainInput} from \"./universal-components/main-input/MainInput\";\r\nimport {FilterValuesType, TaskType} from \"../App\";\r\nimport s from './css/Todolist.module.css'\r\n\r\nexport type PropsType = {\r\n    filter:string\r\n    tasks: TaskType[]\r\n    nameTitle: string\r\n    removeTask: (id: string, todoListId:string) => void\r\n    addTask: (title: string, todoListId:string) => void\r\n    changeIsDone: (newId: string, newIsDone: boolean, todoListId:string) => void\r\n    todoListId: string\r\n    changeTodoListFilter:(filter: FilterValuesType, todoListId: string) => void\r\n    removeTodoList:(todoListId: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = ({\r\n                                                  tasks,\r\n                                                  nameTitle,\r\n                                                  removeTask,\r\n                                                  addTask,\r\n                                                  changeIsDone,\r\n                                                  todoListId,\r\n                                                  changeTodoListFilter,\r\n                                                  removeTodoList\r\n                                              }) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<null | string>(null)\r\n    const [activeButton, setActiveButton] = useState('all')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title.trim() !== '') {\r\n            addTask(title.trim(), todoListId)\r\n            setTitle('')\r\n        } else {\r\n            setError('Enter text')\r\n        }\r\n    }\r\n\r\n    const addTaskHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addTask(title.trim(), todoListId)\r\n            setTitle('')\r\n        } else {\r\n            setError('Enter text')\r\n        }\r\n    }\r\n\r\n    const setAll = () => {\r\n        changeTodoListFilter ('all', todoListId)\r\n        setActiveButton('all')\r\n    }\r\n\r\n    const setComplete = () => {\r\n        changeTodoListFilter ('completed', todoListId)\r\n        setActiveButton('completed')\r\n    }\r\n\r\n    const setActive = () => {\r\n        changeTodoListFilter ('active', todoListId)\r\n        setActiveButton('active')\r\n    }\r\n\r\n    const changeIsDoneHandler = (tId: string, isDone: boolean) => {\r\n        changeIsDone(tId, isDone, todoListId)\r\n    }\r\n\r\n    const mappedTasks = tasks.map(t => {\r\n        return (\r\n            <li className={s.li + ' ' + (t.isDone ? s.isDone : '')}>\r\n                <MainCheckBox key={t.id} checked={t.isDone}\r\n                              callBack={(isDone: boolean) => changeIsDoneHandler(t.id, isDone)}/>\r\n                <span>{t.title}</span>\r\n                <MainButton classname={s.buttonRemove} name={'x'} callback={() => removeTask(t.id, todoListId)}/>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    const removeTodoListHandler = () => {\r\n        removeTodoList(todoListId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.todoListBlock}>\r\n            <MainButton classname={s.button} name={'Delete'} callback={removeTodoListHandler}/>\r\n            <h3>{nameTitle}</h3>\r\n            <div>\r\n                <MainInput\r\n                    error={error}\r\n                    value={title}\r\n                    callback={onChangeHandler}\r\n                    onKeyPress={onKeyPressHandler}\r\n                />\r\n                <MainButton\r\n                    name={'+'}\r\n                    classname={s.button}\r\n                    callback={addTaskHandler}\r\n                />\r\n            </div>\r\n            {error && <div className={s.errorMessage}>{error}</div>}\r\n            <ul className={s.taskBlock}>\r\n                {mappedTasks}\r\n            </ul>\r\n            <div>\r\n                <MainButton classname={s.button + ' ' + (activeButton === 'all' ? s.activeFilter : '')} name={'All'}\r\n                            callback={setAll}/>\r\n                <MainButton classname={s.button + ' ' + (activeButton === 'completed' ? s.activeFilter : '')}\r\n                            name={'Complete'} callback={setComplete}/>\r\n                <MainButton classname={s.button + ' ' + (activeButton === 'active' ? s.activeFilter : '')}\r\n                            name={'Active'} callback={setActive}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './css/Todolist.module.css'\r\nimport {MainInput} from \"./universal-components/main-input/MainInput\";\r\nimport {MainButton} from \"./universal-components/main-button/MainButton\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n      <div className={s.header}>\r\n            <MainInput classname={s.input} callback={()=> {}} onKeyPress={() => {}}/>\r\n            <MainButton classname={s.button} name={'Add Todolist'} callback={()=> {}}/>\r\n      </div>\r\n  )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./components/Toodolist\";\r\nimport {v1} from \"uuid\";\r\nimport {Header} from \"./components/Header\";\r\nimport s from \"./components/css/Todolist.module.css\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string,\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [todoListId: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    // BLL:\r\n    const todoListId_1 = v1()\r\n    const todoListId_2 = v1()\r\n\r\n    const [todoLists, setTodoLists] = useState<TodoListType[]>([\r\n        {id: todoListId_1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todoListId_2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS/TS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"RTK\", isDone: false},\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Water\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: true},\r\n            {id: v1(), title: \"Toilet paper\", isDone: false},\r\n            {id: v1(), title: \"Buckwheat\", isDone: false},\r\n            {id: v1(), title: \"Meet\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    // Function\r\n\r\n    const addTask = (title: string, todoListId:string) => {\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        setTasks({...tasks, [todoListId]: [newTask, ...tasks[todoListId]]})\r\n    }\r\n\r\n    const removeTask = (id: string, todoListId:string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].filter(t => t.id !== id)})\r\n    }\r\n\r\n    const changeIsDone = (newId: string, newIsDone: boolean, todoListId:string) => {\r\n        setTasks({...tasks, [todoListId]: tasks[todoListId].map(el => el.id === newId ? {...el, isDone:newIsDone} : el)})\r\n    }\r\n\r\n    const changeTodoListFilter = (filter: FilterValuesType, todoListId: string) => {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: filter} : tl))\r\n    }\r\n\r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n    const getFilteredTasks = (tasks: Array<TaskType>, filter: FilterValuesType) => {\r\n        let tasksForTodoList = tasks;\r\n        if (filter === \"active\") {\r\n            tasksForTodoList = tasks.filter(t => !t.isDone)\r\n        }\r\n        if (filter === \"completed\") {\r\n            tasksForTodoList = tasks.filter(t => t.isDone)\r\n        }\r\n        return tasksForTodoList\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        return (\r\n            <Todolist\r\n                key={tl.id}\r\n                todoListId={tl.id}\r\n                nameTitle={tl.title}\r\n                tasks={getFilteredTasks(tasks[tl.id], tl.filter)}\r\n                filter={tl.filter}\r\n                removeTask={removeTask}\r\n                addTask={addTask}\r\n                changeIsDone={changeIsDone}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                removeTodoList={removeTodoList}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <div className={s.todoListSection}>\r\n                {todoListComponents}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}