{"version":3,"sources":["components/css/Todolist.module.css","components/universal-components/main-button/MainButton.tsx","components/universal-components/main-checkbox/MainCheckBox.tsx","components/universal-components/main-input/MainInput.tsx","components/Toodolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MainButton","callback","name","classname","className","onClick","MainCheckBox","props","type","checked","onChange","e","callBack","currentTarget","MainInput","value","onKeyPress","Todolist","tasks","nameTitle","removeTask","addTask","setFilter","changeIsDone","useState","title","setTitle","error","setError","activeButton","setActiveButton","mappedTasks","map","t","s","li","isDone","key","id","tId","changeIsDoneHandler","buttonRemove","input","errorInput","button","errorMessage","taskBlock","activeFilter","App","v1","setTasks","filter","filteredTask","filterTask","newTask","newId","newIsDone","el","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6f5f7d83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"Todolist_li__3SaYh\",\"button\":\"Todolist_button__2TRqR\",\"buttonRemove\":\"Todolist_buttonRemove__1T2Cf\",\"input\":\"Todolist_input__1gWoG\",\"errorInput\":\"Todolist_errorInput__3i9z5\",\"errorMessage\":\"Todolist_errorMessage__3_w_0\",\"activeFilter\":\"Todolist_activeFilter__gJDQh\",\"isDone\":\"Todolist_isDone__2zKox\",\"taskBlock\":\"Todolist_taskBlock__14wDS\"};","import React from \"react\";\r\n\r\ntype MainButtonPropsType = {\r\n    name: string\r\n    callback: () => void\r\n    classname?: string\r\n}\r\n\r\nexport const MainButton: React.FC<MainButtonPropsType> = ({callback, name, classname = ''}) => {\r\n\r\n    const onClickHandler = () => {\r\n        callback()\r\n    }\r\n\r\n    return (\r\n        <button className={classname} onClick={onClickHandler}>{name}</button>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\n\r\ntype SuperCheckBoxPropsType = {\r\n    checked: boolean\r\n    callBack: (isDone: boolean) => void\r\n}\r\n\r\nexport const MainCheckBox = (props:SuperCheckBoxPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.callBack(e.currentTarget.checked)\r\n    }\r\n\r\n  return (\r\n      <input type=\"checkbox\" checked={props.checked} onChange={onChangeHandler}/>\r\n  )\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\n\r\ntype SuperInputPropsType = {\r\n    value: string\r\n    callback:(e:ChangeEvent<HTMLInputElement>) => void | undefined\r\n    onKeyPress:(e: KeyboardEvent<HTMLInputElement>) => void\r\n    classname?:any\r\n}\r\n\r\nexport const MainInput = (props:SuperInputPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.callback(e)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        props.onKeyPress(e)\r\n    }\r\n\r\n    return (\r\n        <input value={props.value} className={props.classname} onKeyPress={onKeyPressHandler} onChange={onChangeHandler}/>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {MainButton} from \"./universal-components/main-button/MainButton\";\r\nimport {MainCheckBox} from \"./universal-components/main-checkbox/MainCheckBox\";\r\nimport {MainInput} from \"./universal-components/main-input/MainInput\";\r\nimport {FilterValuesType, TaskType} from \"../App\";\r\nimport s from './css/Todolist.module.css'\r\n\r\nexport type PropsType = {\r\n    tasks: TaskType[]\r\n    nameTitle: string\r\n    removeTask: (id: string) => void\r\n    addTask: (title: string) => void\r\n    setFilter: (filter: FilterValuesType) => void\r\n    changeIsDone: (newId: string, newIsDone: boolean) => void\r\n}\r\n\r\nexport const Todolist: React.FC<PropsType> = ({tasks, nameTitle, removeTask, addTask, setFilter, changeIsDone}) => {\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<null | string>(null)\r\n    const [activeButton, setActiveButton] = useState('all')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && title !== '') {\r\n            addTask(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Enter text')\r\n        }\r\n    }\r\n\r\n    const addTaskHandler = () => {\r\n        if (title !== '') {\r\n            addTask(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Enter text')\r\n        }\r\n\r\n    }\r\n\r\n    const setAll = () => {\r\n        setFilter('all')\r\n        setActiveButton('all')\r\n    }\r\n\r\n    const setComplete = () => {\r\n        setFilter('completed')\r\n        setActiveButton('completed')\r\n    }\r\n\r\n    const setActive = () => {\r\n        setFilter('active')\r\n        setActiveButton('active')\r\n    }\r\n\r\n    const changeIsDoneHandler = (tId: string, isDone: boolean) => {\r\n        changeIsDone(tId, isDone)\r\n    }\r\n\r\n    const mappedTasks = tasks.map(t => {\r\n        return (\r\n            <li className={s.li + ' ' + (t.isDone ? s.isDone : '')}>\r\n                <MainCheckBox key={t.id} checked={t.isDone}\r\n                              callBack={(isDone: boolean) => changeIsDoneHandler(t.id, isDone)}/>\r\n                <span>{t.title}</span>\r\n                <MainButton classname={s.buttonRemove} name={'x'} callback={() => removeTask(t.id)}/>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>{nameTitle}</h3>\r\n                <div>\r\n                    <MainInput\r\n                        value={title}\r\n                        classname={`${s.input} ${error && s.errorInput}`}\r\n                        callback={onChangeHandler}\r\n                        onKeyPress={onKeyPressHandler}\r\n                    />\r\n                    <MainButton\r\n                        name={'+'}\r\n                        classname={s.button}\r\n                        callback={addTaskHandler}\r\n                    />\r\n                </div>\r\n                {error && <div className={s.errorMessage}>{error}</div>}\r\n                <ul className={s.taskBlock}>\r\n                    {mappedTasks}\r\n                </ul>\r\n                <div>\r\n                    <MainButton classname={s.button + ' ' + (activeButton === 'all' ? s.activeFilter : '')} name={'All'}\r\n                                callback={setAll}/>\r\n                    <MainButton classname={s.button + ' ' + (activeButton === 'completed' ? s.activeFilter : '')}\r\n                                name={'Complete'} callback={setComplete}/>\r\n                    <MainButton classname={s.button + ' ' + (activeButton === 'active' ? s.activeFilter : '')}\r\n                                name={'Active'} callback={setActive}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./components/Toodolist\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const filterTask = (tasks: TaskType[], filter: string): TaskType[] => {\r\n    if (filter === \"active\") return tasks.filter(t => !t.isDone);\r\n    if (filter === \"completed\") return tasks.filter(t => t.isDone);\r\n    return tasks\r\n}\r\n\r\nfunction App() {\r\n    const [tasks, setTasks] = useState([\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n        {id: v1(), title: \"Rest API\", isDone: false},\r\n        {id: v1(), title: \"GraphQL\", isDone: false},\r\n    ]);\r\n    const [filter, setFilter] = useState<FilterValuesType>('all');\r\n    const filteredTask = filterTask(tasks, filter)\r\n\r\n    const changeIsDone = (newId: string, newIsDone: boolean) => {\r\n        setTasks(tasks.map(el => el.id === newId ? {...el, isDone: newIsDone} : el))\r\n    }\r\n\r\n    const addTask = (title: string) => {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let newTask = [task, ...tasks]\r\n        setTasks(newTask)\r\n    }\r\n\r\n    const removeTask = (id: string) => {\r\n        setTasks(tasks.filter(t => t.id !== id))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist\r\n                nameTitle=\"What to learn\"\r\n                tasks={filteredTask}\r\n                removeTask={removeTask}\r\n                addTask={addTask}\r\n                setFilter={setFilter}\r\n                changeIsDone={changeIsDone}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}